import { NextPage } from 'next';
import styles from '../styles/LoginPage.module.scss';
import { BiArrowBack } from "react-icons/bi";
import { ReactNode, useState } from "react";

interface IModalProps {
  title: string;
  toClose: (option: boolean)=> void;
  children: ReactNode;
}

const Photo = () => {
  return (
    <svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
      <circle cx="40" cy="40" r="39" stroke="white" strokeWidth="2"/>
      <path d="M47.6364 32.6363C48.3393 32.6363 48.9091 32.0665 48.9091 31.3636C48.9091 30.6607 48.3393 30.0909 47.6364 30.0909C46.9335 30.0909 46.3636 30.6607 46.3636 31.3636C46.3636 32.0665 46.9335 32.6363 47.6364 32.6363Z" fill="white"/>
      <path d="M33.3538 26.909C33.5104 26.909 33.6364 26.7957 33.6364 26.6545V25.8909C33.6364 25.7509 33.5104 25.6364 33.3538 25.6364H31.3735C31.2169 25.6364 31.0909 25.7496 31.0909 25.8909V26.6545C31.0909 26.7945 31.2169 26.909 31.3735 26.909H33.3538Z" fill="white"/>
      <path d="M40.6363 41.5454C43.7991 41.5454 46.3636 38.9808 46.3636 35.8181C46.3636 32.6554 43.7991 30.0908 40.6363 30.0908C37.4736 30.0908 34.9091 32.6554 34.9091 35.8181C34.9091 38.9808 37.4736 41.5454 40.6363 41.5454ZM40.6363 31.3636C43.0965 31.3636 45.0909 33.3579 45.0909 35.8181C45.0909 38.2783 43.0965 40.2727 40.6363 40.2727C38.1762 40.2727 36.1818 38.2783 36.1818 35.8181C36.1818 33.3579 38.1762 31.3636 40.6363 31.3636Z" fill="white"/>
      <path d="M26 30.0909V42.8182C26 45.3637 28.5454 45.3637 28.5454 45.3637H51.4545C51.4545 45.3637 54 45.3637 54 42.8182V30.0909C54 27.5454 51.4545 27.5454 51.4545 27.5454H46.6182L45.2665 25.294C45.1698 25.1311 44.9356 25 44.7524 25H36.5204C36.3333 25 36.1004 25.1362 36.0062 25.294L34.6545 27.5454H28.5454C28.5454 27.5454 26 27.5454 26 30.0909ZM35.5124 28.8182L36.9302 26.2727H44.2204L45.8329 28.8182H51.4405C51.4405 28.8182 52.7272 28.8182 52.7272 30.1138V42.794C52.7272 44.0909 51.4405 44.0909 51.4405 44.0909H28.5594C28.5594 44.0909 27.2727 44.0909 27.2727 42.794V30.1138C27.2727 28.8182 28.5594 28.8182 28.5594 28.8182H35.5124Z" fill="white"/>
      <path d="M31.3772 51.5938H32.5278C33.0675 51.5938 33.547 51.7145 33.966 51.956C34.385 52.1974 34.7141 52.5336 34.9532 52.9645C35.1923 53.3954 35.3119 53.8949 35.3119 54.4631C35.3119 55.0312 35.1923 55.532 34.9532 55.9652C34.7141 56.3984 34.385 56.737 33.966 56.9808C33.547 57.2247 33.0675 57.3466 32.5278 57.3466H31.3772C30.8374 57.3466 30.358 57.2259 29.939 56.9844C29.52 56.7429 29.1909 56.4067 28.9518 55.9759C28.7127 55.545 28.5931 55.0455 28.5931 54.4773C28.5931 53.9091 28.7127 53.4084 28.9518 52.9751C29.1909 52.5419 29.52 52.2034 29.939 51.9595C30.358 51.7157 30.8374 51.5938 31.3772 51.5938ZM31.3772 52.375C30.9653 52.375 30.6173 52.4614 30.3332 52.6342C30.0514 52.8071 29.8372 53.0509 29.6904 53.3658C29.546 53.6806 29.4738 54.0511 29.4738 54.4773C29.4738 54.8987 29.546 55.2656 29.6904 55.5781C29.8372 55.8906 30.0514 56.1333 30.3332 56.3061C30.6173 56.4789 30.9653 56.5653 31.3772 56.5653H32.5278C32.9397 56.5653 33.2865 56.4789 33.5683 56.3061C33.8523 56.1333 34.0666 55.8894 34.211 55.5746C34.3578 55.2597 34.4312 54.8892 34.4312 54.4631C34.4312 54.0417 34.3578 53.6747 34.211 53.3622C34.0666 53.0497 33.8523 52.8071 33.5683 52.6342C33.2865 52.4614 32.9397 52.375 32.5278 52.375H31.3772ZM32.3999 50.5994V58.2983H31.5193V50.5994H32.3999ZM38.7246 58.1136C38.2322 58.1136 37.8002 57.9964 37.4285 57.7621C37.0592 57.5277 36.7703 57.1998 36.562 56.7784C36.356 56.357 36.253 55.8646 36.253 55.3011C36.253 54.733 36.356 54.237 36.562 53.8132C36.7703 53.3894 37.0592 53.0604 37.4285 52.826C37.8002 52.5916 38.2322 52.4744 38.7246 52.4744C39.2171 52.4744 39.6479 52.5916 40.0172 52.826C40.3889 53.0604 40.6778 53.3894 40.8837 53.8132C41.0921 54.237 41.1962 54.733 41.1962 55.3011C41.1962 55.8646 41.0921 56.357 40.8837 56.7784C40.6778 57.1998 40.3889 57.5277 40.0172 57.7621C39.6479 57.9964 39.2171 58.1136 38.7246 58.1136ZM38.7246 57.3608C39.0987 57.3608 39.4065 57.2649 39.6479 57.0732C39.8894 56.8814 40.0681 56.6293 40.1842 56.3168C40.3002 56.0043 40.3582 55.6657 40.3582 55.3011C40.3582 54.9366 40.3002 54.5968 40.1842 54.282C40.0681 53.9671 39.8894 53.7126 39.6479 53.5185C39.4065 53.3243 39.0987 53.2273 38.7246 53.2273C38.3506 53.2273 38.0428 53.3243 37.8013 53.5185C37.5599 53.7126 37.3811 53.9671 37.2651 54.282C37.1491 54.5968 37.0911 54.9366 37.0911 55.3011C37.0911 55.6657 37.1491 56.0043 37.2651 56.3168C37.3811 56.6293 37.5599 56.8814 37.8013 57.0732C38.0428 57.2649 38.3506 57.3608 38.7246 57.3608ZM41.5976 53.3267V52.5455H46.0295V53.3267H44.2397V58H43.4016V53.3267H41.5976ZM49.0196 58.1136C48.5272 58.1136 48.0952 57.9964 47.7235 57.7621C47.3541 57.5277 47.0653 57.1998 46.857 56.7784C46.651 56.357 46.548 55.8646 46.548 55.3011C46.548 54.733 46.651 54.237 46.857 53.8132C47.0653 53.3894 47.3541 53.0604 47.7235 52.826C48.0952 52.5916 48.5272 52.4744 49.0196 52.4744C49.5121 52.4744 49.9429 52.5916 50.3122 52.826C50.6839 53.0604 50.9728 53.3894 51.1787 53.8132C51.3871 54.237 51.4912 54.733 51.4912 55.3011C51.4912 55.8646 51.3871 56.357 51.1787 56.7784C50.9728 57.1998 50.6839 57.5277 50.3122 57.7621C49.9429 57.9964 49.5121 58.1136 49.0196 58.1136ZM49.0196 57.3608C49.3937 57.3608 49.7015 57.2649 49.9429 57.0732C50.1844 56.8814 50.3631 56.6293 50.4792 56.3168C50.5952 56.0043 50.6532 55.6657 50.6532 55.3011C50.6532 54.9366 50.5952 54.5968 50.4792 54.282C50.3631 53.9671 50.1844 53.7126 49.9429 53.5185C49.7015 53.3243 49.3937 53.2273 49.0196 53.2273C48.6456 53.2273 48.3378 53.3243 48.0963 53.5185C47.8549 53.7126 47.6761 53.9671 47.5601 54.282C47.4441 54.5968 47.3861 54.9366 47.3861 55.3011C47.3861 55.6657 47.4441 56.0043 47.5601 56.3168C47.6761 56.6293 47.8549 56.8814 48.0963 57.0732C48.3378 57.2649 48.6456 57.3608 49.0196 57.3608Z" fill="white"/>
    </svg>
  )
}

const Modal = ({ title, toClose, children } :IModalProps) => {
  return(
    <div className={styles.modal}>
      <div className={styles.header}>
        <h1 onClick={()=> toClose(false)}>{title}</h1>
       <Photo/>
      </div>
      <form>
        {children}
      </form>
      <div className={styles.footer}>
        Я принимаю условия <span className={styles.agreement}> Пользовательского
        соглашения</span> и  <span className={styles.agreement}>Правила использования</span>
      </div>
    </div>
  )
}
const LoginPage: NextPage = () => {
  const [loginFormIsOpen, setLoginFormIsOpen] = useState(false);
  const [signupFormIsOpen, setSignupFormIsOpen] = useState(false);

  return (
    <div className={styles.container}>
      <BiArrowBack className={styles.back} size='xl'/>
      <div className={styles.section}>
        <div className={styles.info}>
          <h1>Лига Тенниса</h1>
          <p>Чтобы получить доступ к перечень турниров и тренировок, а также список тренерского штаба, необходимо войти в систему, либо зарегистрироваться</p>
        </div>
        <div className={styles.buttons}>
          <button onClick={()=> setLoginFormIsOpen(true)} className={styles.login}>Войти в аккаунт</button>
          <button onClick={()=> setSignupFormIsOpen(true)} className={styles.signup}>Регистрация</button>
        </div>
      </div>
      {loginFormIsOpen && <Modal title={'Вход в аккаунт'} toClose={setLoginFormIsOpen}>
        <input name={'phoneNumber'} placeholder={''}  type={'phone'}/>
        <input name={'password'} placeholder={'Пароль'}  type={'password'}/>
        <div className={styles.rememberMe}>
          <input type="checkbox"/>
          <span>Запомнить меня</span>
        </div>
        <input className={styles.login} type="submit" value='Войти в аккаунт'/>
      </Modal>}
      {signupFormIsOpen && <Modal title={'Новый Аккаунт'} toClose={setSignupFormIsOpen}>
        <input name={'phoneNumber'} placeholder={''}  type={'phone'}/>
        <input name={'email'} placeholder={'Почтовый адрес'}  type={'email'}/>
        <input name={'password'} placeholder={'Пароль'}  type={'password'}/>
        <input className={styles.signup} type="submit" value='Зарегистрироваться'/>
      </Modal>}
    </div>
  );
};

export default LoginPage;