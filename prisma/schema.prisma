generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model match {
  id                              Int         @id(map: "idx_16888_match_pkey") @default(autoincrement())
  tournament_id                   Int?
  player1_id                      Int?
  player2_id                      Int?
  comment                         String?
  is_completed                    Boolean?
  stage                           Int?
  start_date                      DateTime?   @db.Date
  winner_id                       String?
  score                           String?
  player3_id                      Int?
  player4_id                      Int?
  player_match_player1_idToplayer player?     @relation("match_player1_idToplayer", fields: [player1_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "core_match_player1_id_fkey")
  player_match_player2_idToplayer player?     @relation("match_player2_idToplayer", fields: [player2_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "core_match_player2_id_fkey")
  player_match_player3_idToplayer player?     @relation("match_player3_idToplayer", fields: [player3_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "core_match_player3_id_fkey")
  player_match_player4_idToplayer player?     @relation("match_player4_idToplayer", fields: [player4_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "core_match_player4_id_fkey")
  tournament                      tournament? @relation(fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "core_match_tournament_id_fkey")

  @@index([player1_id], map: "idx_16888_core_match_26d85d6c")
  @@index([tournament_id], map: "idx_16888_core_match_656a3fdb")
  @@index([player3_id], map: "idx_16888_core_match_6bbfd55d")
  @@index([player2_id], map: "idx_16888_core_match_863818d8")
  @@index([player4_id], map: "idx_16888_core_match_9c006b3a")
}

model player {
  id                             Int                  @id(map: "idx_16917_core_player_pkey") @default(autoincrement())
  first_name                     String?
  last_name                      String?
  date_of_birth                  DateTime?            @db.Date
  city                           String?
  country                        String?
  email                          String?
  phone                          String?
  avatar                         String?
  level                          Int?
  age                            Int?
  gameplay_style                 String?
  forehand                       String?
  beckhand                       String?
  insta_link                     String?
  is_coach                       Boolean?
  in_tennis_from                 DateTime?            @db.Date
  job_description                String?
  technique                      Int                  @default(0)
  tactics                        Int                  @default(0)
  power                          Int?                 @default(0)
  shakes                         Int                  @default(0)
  serve                          Int                  @default(0)
  behaviour                      Int                  @default(0)
  match_match_player1_idToplayer match[]              @relation("match_player1_idToplayer")
  match_match_player2_idToplayer match[]              @relation("match_player2_idToplayer")
  match_match_player3_idToplayer match[]              @relation("match_player3_idToplayer")
  match_match_player4_idToplayer match[]              @relation("match_player4_idToplayer")
  tournament_players             tournament_players[]
}

model tournament {
  id                       Int                  @id(map: "idx_16929_core_tournament_pkey") @default(autoincrement())
  name                     String?
  address                  String?
  start_date               DateTime?            @db.Date
  is_finished              Boolean?
  surface                  Int?
  associated_tournament_id Int?                 @unique(map: "idx_16929_sqlite_autoindex_core_tournament_1")
  draw_type                Int?
  players_order            String?
  draw                     String?
  city                     String?
  tournament_type          Int?
  is_doubles               Boolean?
  status                   Int?
  tournament               tournament?          @relation("tournamentTotournament", fields: [associated_tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "core_tournament_associated_tournament_id_fkey")
  match                    match[]
  other_tournament         tournament?          @relation("tournamentTotournament")
  tournament_players       tournament_players[]
}

model tournament_players {
  id            Int         @id(map: "idx_16849_core_tournament_players_pkey") @default(autoincrement())
  tournament_id Int?
  player_id     Int?
  player        player?     @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "core_tournament_players_player_id_fkey")
  tournament    tournament? @relation(fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "core_tournament_players_tournament_id_fkey")

  @@unique([tournament_id, player_id], map: "idx_16849_sqlite_autoindex_core_tournament_players_1")
  @@index([tournament_id], map: "idx_16849_core_tournament_players_656a3fdb")
  @@index([player_id], map: "idx_16849_core_tournament_players_afe72417")
}
